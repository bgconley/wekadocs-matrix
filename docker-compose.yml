# Implements Phase 1, Task 1.1 (Docker environment setup)
# See: /docs/spec.md §2 (Architecture)
# See: /docs/implementation-plan.md → Task 1.1 DoD & Tests

version: '3.8'

networks:
  weka-net:
    driver: bridge
    name: weka-net

volumes:
  neo4j-data:
  neo4j-logs:
  qdrant-data:
  redis-data:

services:
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: weka-neo4j
    networks:
      - weka-net
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - ./scripts/neo4j:/scripts:ro
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_memory_heap_initial__size=${NEO4J_HEAP_INITIAL:-512m}
      - NEO4J_server_memory_heap_max__size=${NEO4J_HEAP_MAX:-1G}
      - NEO4J_server_memory_pagecache_size=${NEO4J_PAGECACHE:-512m}
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_server_db_query__cache__size=50
      - NEO4J_db_transaction_timeout=30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: weka-qdrant
    networks:
      - weka-net
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__LOG_LEVEL=${QDRANT_LOG_LEVEL:-INFO}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/6333' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis:
    image: redis:7.2-alpine
    container_name: weka-redis
    networks:
      - weka-net
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

  mcp-server:
    build:
      context: .
      dockerfile: docker/mcp-server.Dockerfile
    container_name: weka-mcp-server
    networks:
      - weka-net
    ports:
      - "${MCP_PORT:-8000}:8000"
    volumes:
      - ./config:/app/config:ro
      - ./src:/app/src:ro
    environment:
      - ENV=${ENV:-development}
      - CONFIG_PATH=/app/config/${ENV:-development}.yaml
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_GRPC_PORT=6334
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://jaeger:4318}
      - OTEL_SERVICE_NAME=weka-mcp-server
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  ingestion-worker:
    build:
      context: .
      dockerfile: docker/ingestion-worker.Dockerfile
    container_name: weka-ingestion-worker
    command: python -m src.ingestion.worker
    networks:
      - weka-net
    volumes:
      - ./config:/app/config:ro
      - ./src:/app/src
      - ./data:/app/data:ro
    environment:
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/0
      - INGEST_NS=ingest
      - ENV=${ENV:-development}
      - CONFIG_PATH=/app/config/${ENV:-development}.yaml
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_GRPC_PORT=6334
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    restart: unless-stopped

  # Phase 6: Auto-Ingestion Service (Task 6.1)
  ingestion-service:
    build:
      context: .
      dockerfile: docker/ingestion-service.Dockerfile
    container_name: weka-ingestion-service
    command: python -m src.ingestion.auto.service
    networks:
      - weka-net
    ports:
      - "8081:8081"  # Health/metrics/ready endpoints
    volumes:
      - ./config:/app/config:ro
      - ./src:/app/src
      - ./data:/app/data
    environment:
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/0
      - INGEST_NS=ingest
      - INGEST_WATCH_DIR=/app/data/ingest
      - INGEST_PORT=8081
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  # Optional: Jaeger for OpenTelemetry tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: weka-jaeger
    networks:
      - weka-net
    ports:
      - "16686:16686"  # UI
      - "4318:4318"    # OTLP HTTP receiver
      - "4317:4317"    # OTLP gRPC receiver
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=${JAEGER_LOG_LEVEL:-info}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
