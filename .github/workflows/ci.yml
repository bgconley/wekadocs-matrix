name: WekaDocs GraphRAG MCP CI/CD

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mcp-server

jobs:
  test:
    name: Test All Phases
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Set up Docker Compose
        run: docker compose up -d

      - name: Wait for services
        run: |
          timeout 120 bash -c 'until curl -sf http://localhost:8000/health; do sleep 2; done'

      - name: Run Phase 1 Tests
        run: pytest tests/p1_*.py -v --junitxml=reports/phase-1/junit.xml

      - name: Run Phase 2 Tests
        run: pytest tests/p2_*.py -v --junitxml=reports/phase-2/junit.xml

      - name: Run Phase 3 Tests
        run: pytest tests/p3_*.py -v --junitxml=reports/phase-3/junit.xml

      - name: Run Phase 4 Tests
        run: pytest tests/p4_*.py -v --junitxml=reports/phase-4/junit.xml

      - name: Run Phase 5 Tests
        run: pytest tests/p5_*.py -v --junitxml=reports/phase-5/junit.xml

      - name: Run Phase 6 Tests
        run: pytest tests/p6_*.py -v --junitxml=reports/phase-6/junit.xml

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: reports/

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to staging
        run: |
          kubectl apply -k deploy/k8s/overlays/staging
          kubectl rollout status deployment/mcp-server-blue -n wekadocs --timeout=5m

  deploy-production:
    name: Deploy to Production (Canary)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Run canary deployment
        run: |
          chmod +x deploy/scripts/canary-rollout.sh
          ./deploy/scripts/canary-rollout.sh ${{ steps.meta.outputs.tags[0] }} --auto-rollback

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
